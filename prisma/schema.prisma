// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============  üë§ USER ================
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  crn           String   @unique
  password      String
  name          String
  isVerified    Boolean  @default(false)
  role          Role     @default(BUYER)
  businessName String
  city          String
  nid           String   @unique
  agreedToTerms   Boolean  @default(true)
  pfpUrl        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tokens     UserToken[]
  categories UserCategory[]
}

// ============ ü§´ USER_TOKEN ===============
model UserToken {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  tokenType TokenType
  token     String
  createdAt DateTime  @default(now())
  expiresAt DateTime
  isUsed    Boolean?  @default(false)
}

// =========== üìÅ CATEGORY ==============
model Category {
  id               Int        @id @default(autoincrement())
  name             String     @unique
  parentCategoryId Int?
  parentCategory   Category?  @relation("CategoryToSubcategories", fields: [parentCategoryId], references: [id])
  subcategories    Category[] @relation("CategoryToSubcategories")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  users UserCategory[]
}

// ===========  üö• USER_CATEGORY =============
model UserCategory {
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, categoryId])
}

// ===========  ‚≠êÔ∏è SUPPLIER_CATEGORY =============
// model SupplierCategory {
//   supplierId    String
//   supplier      Supplier  @relation(fields: [supplierId], references: [id])
//   categoryId Int
//   category   Category @relation(fields: [categoryId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([userId, categoryId])
// }

// ============  ‚öîÔ∏è ENUMS ================

enum Role {
  SUPPLIER
  BUYER
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TOKEN
}
