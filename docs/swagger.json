{
  "openapi": "3.0.0",
  "paths": {
    "/api": {
      "get": {
        "description": "This is the default root endpoint generated by NestJS. It returns a static test message and is not part of the real Silah API.",
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A \"Hello, World!\" message.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Hello, World!"
                }
              }
            }
          }
        },
        "summary": "Not a usable endpoint",
        "tags": [
          "Default"
        ]
      }
    },
    "/api/users": {
      "get": {
        "operationId": "UserController_getUserData",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User"
        ]
      },
      "patch": {
        "operationId": "UserController_updateUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "operationId": "UserController_getUserById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/api/users/switch-role": {
      "patch": {
        "operationId": "UserController_switchUserRole",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/api/users/create-user": {
      "post": {
        "operationId": "UserController_createUser",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/api/auth/signup": {
      "post": {
        "operationId": "AuthController_signUp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User signed up successfully. JWT sent in cookie.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Signup successful"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - validation or conflict",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 400,
                        "message": "These categories are invalid: Cleaning, Laundry",
                        "error": "Bad Request"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 400,
                        "message": "NID already exists",
                        "error": "Bad Request"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 400,
                        "message": "CRN already exists",
                        "error": "Bad Request"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 400,
                        "message": "Email already exists",
                        "error": "Bad Request"
                      }
                    }
                  ]
                },
                "examples": {
                  "categories": {
                    "summary": "Invalid Categories",
                    "value": {
                      "statusCode": 400,
                      "message": "These categories are invalid: Cleaning, Laundry",
                      "error": "Bad Request"
                    }
                  },
                  "nid": {
                    "summary": "NID already exists",
                    "value": {
                      "statusCode": 400,
                      "message": "NID already exists",
                      "error": "Bad Request"
                    }
                  },
                  "crn": {
                    "summary": "CRN already exists",
                    "value": {
                      "statusCode": 400,
                      "message": "CRN already exists",
                      "error": "Bad Request"
                    }
                  },
                  "email": {
                    "summary": "Email already exists",
                    "value": {
                      "statusCode": 400,
                      "message": "Email already exists",
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Registers a new user and returns a JWT token in a cookie",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "description": "Either \"email\" or \"crn\" must be provided, but not both.",
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Login successful"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request â€“ validation or authentication failure",
            "content": {
              "application/json": {
                "examples": {
                  "userNotFound": {
                    "summary": "The user does not exist in the system",
                    "value": {
                      "statusCode": 400,
                      "message": "User not found",
                      "error": "Bad Request"
                    }
                  },
                  "invalidCredentials": {
                    "summary": "The email or CRN exists, but the password is incorrect",
                    "value": {
                      "statusCode": 400,
                      "message": "Invalid credentials",
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Login user and send back JWT token as a cookie",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully logged out",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Successfully logged out"
                }
              }
            }
          }
        },
        "summary": "Logout user by clearing token cookie",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/verify-email": {
      "post": {
        "description": "This endpoint should be called when the user clicks the verification button which is after clicking the link in their email.",
        "operationId": "AuthController_verifyEmail",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "query",
            "description": "JWT token from email link",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Email verified successfully"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token, or already verified",
            "content": {
              "application/json": {
                "examples": {
                  "userNotFound": {
                    "summary": "The user not found or already verified",
                    "value": {
                      "statusCode": 400,
                      "message": "User not found or already verified",
                      "error": "Bad Request"
                    }
                  },
                  "invalidCredentials": {
                    "summary": "Invalid or expired token",
                    "value": {
                      "statusCode": 400,
                      "message": "Invalid or expired verification token",
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Verify user email using token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/resend-verification-email": {
      "post": {
        "description": "This endpoint allows users to request a new verification email if they missed the original one or if the token expired. <br>If the you received \"Invalid or expired verification token\" error you should call this endpoint to resend the email. ",
        "operationId": "AuthController_resendVerificationEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Email to resend verification to",
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "email": "example@email.com"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification email resent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Verification email resent successfully"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email already verified",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Email already verified",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Resend verification email to user",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/request-password-reset": {
      "post": {
        "operationId": "AuthController_requestPasswordReset",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "operationId": "AuthController_resetPassword",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Auth"
        ]
      }
    }
  },
  "info": {
    "title": "Silah Backend API Documentation",
    "description": "Use this documentation to explore, test, and understand the available API endpoints, their request/response structure, and any required parameters such as headers, cookies, or authentication tokens.",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      },
      "cookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "token"
      }
    },
    "schemas": {
      "SignupDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "example": "StrongPass123"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "crn": {
            "type": "string",
            "example": "1234567890"
          },
          "businessName": {
            "type": "string",
            "example": "Acme Corp"
          },
          "city": {
            "type": "string",
            "example": "Riyadh"
          },
          "nid": {
            "type": "string",
            "example": "0987654321"
          },
          "categories": {
            "example": [
              "Home & Living",
              "Technical & Repair Services"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "agreedToTerms": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "email",
          "password",
          "name",
          "crn",
          "businessName",
          "city",
          "nid",
          "categories",
          "agreedToTerms"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address (optional if CRN is provided)",
            "example": "user@example.com",
            "format": "email"
          },
          "crn": {
            "type": "string",
            "description": "User CRN number (10 digits, optional if email is provided)",
            "example": "1234567890",
            "pattern": "^\\d{10}$"
          },
          "password": {
            "type": "string",
            "description": "User password (8 to 28 characters)",
            "example": "P@ssw0rd123",
            "minLength": 8,
            "maxLength": 28
          },
          "emailOrCrnCheck": {
            "type": "boolean",
            "description": "Internal field to validate that either email or CRN is provided",
            "example": true,
            "readOnly": true
          }
        },
        "required": [
          "password",
          "emailOrCrnCheck"
        ]
      }
    }
  }
}